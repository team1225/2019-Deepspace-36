// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1225.DeepSpace36;

import org.usfirst.frc1225.DeepSpace36.RobotMap;
import org.usfirst.frc1225.DeepSpace36.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc1225.DeepSpace36.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    public Joystick driverJoystick;
    public Joystick operatorJoystick;

    public OI() {
        driverJoystick = new Joystick(0);
        operatorJoystick = new Joystick(1);
            
        Button operatorButton1 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_A),
            operatorButton2 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_B),
            operatorButton3 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_X),
            operatorButton4 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_Y),
            operatorButton5 = new JoystickButton(operatorJoystick, RobotMap.RIGHT_STICK_BUTTON),
            operatorButton6 = new JoystickButton(operatorJoystick, RobotMap.RIGHT_STICK_BUTTON),
            operatorButton7 = new JoystickButton(operatorJoystick, RobotMap.RIGHT_STICK_BUTTON),
            driverButton1 = new JoystickButton(driverJoystick, RobotMap.BUTTON_A),
            driverButton2 = new JoystickButton(driverJoystick, RobotMap.BUTTON_B),
            driverButton3 = new JoystickButton(driverJoystick, RobotMap.BUTTON_X),
            driverButton4 = new JoystickButton(driverJoystick, RobotMap.BUTTON_Y);
        
        // Driver controls
        // driverButton1.whenPressed(new RetractRearLegs());
        // driverButton2.whenPressed(new ExtendAllLegs());
        // driverButton3.whenPressed(new RetractFrontLegs());
        // driverButton4.whileHeld(new testDrive());

        AimArm Cargo1 = new AimArm(RobotMap.Cargo1, true);
        AimArm Cargo2 = new AimArm(RobotMap.Cargo2, true);
        AimArm Cargo3 = new AimArm(RobotMap.Cargo3, true);
        AimArm Hatch1 = new AimArm(RobotMap.HatchPanel1, false);
        AimArm Hatch2 = new AimArm(RobotMap.HatchPanel2, false);
        AimArm Hatch3 = new AimArm(RobotMap.HatchPanel3, false);
        
        // // Operator Controls
        operatorButton1.whileHeld(new RaiseArm());
        operatorButton2.whileHeld(new LowerArm());
        operatorButton3.whenPressed(Cargo1);
        operatorButton4.whenPressed(Cargo2);
        operatorButton5.whenPressed(Cargo3);
        operatorButton6.whenPressed(Hatch1);
        operatorButton7.whenPressed(Hatch2);

        // // SmartDashboard Buttons
        // SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        // SmartDashboard.putData("GrabCargo", new GrabCargo());
        // SmartDashboard.putData("RaiseArm", new RaiseArm());
        // SmartDashboard.putData("ExtendLegs", new ExtendAllLegs());
        // SmartDashboard.putData("RetractFrontLegs", new RetractFrontLegs());
        // SmartDashboard.putData("RetractRearLegs", new RetractRearLegs());
        SmartDashboard.putData("ARM/Cargo_Level 1", Cargo1);
        SmartDashboard.putData("ARM/Cargo_Level 2", Cargo2);
        SmartDashboard.putData("ARM/Hatch_Level_1", Hatch1);
        SmartDashboard.putData("ARM/Hatch_Level_2", Hatch2);
        SmartDashboard.putData("ARM/Hatch_Level_3", Hatch3);
        SmartDashboard.putData("ARM/Cargo_Level 3", Cargo3);
    }

    public Joystick getdriverJoystick() {
        return driverJoystick;    }
}
