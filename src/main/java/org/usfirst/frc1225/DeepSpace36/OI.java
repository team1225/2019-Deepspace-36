// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1225.DeepSpace36;

import org.usfirst.frc1225.DeepSpace36.RobotMap;
import org.usfirst.frc1225.DeepSpace36.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc1225.DeepSpace36.subsystems.*;
import org.usfirst.frc1225.DeepSpace36.utils.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    public Joystick driverJoystick = new Joystick(0);
    public Joystick operatorJoystick = new Joystick(1);
    Button operatorButton1 = new JoystickButton(operatorJoystick, RobotMap.LEFT_BUMPER),
    operatorButton2 = new JoystickButton(operatorJoystick, RobotMap.RIGHT_BUMPER),
    operatorButton3 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_X),
    operatorButton4 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_Y),
    operatorButton5 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_B),
    operatorButton6 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_A),
    operatorButton7 = new JoystickButton(operatorJoystick, RobotMap.RIGHT_STICK_BUTTON),
    operatorButton8 = new DPadButton(operatorJoystick, DPadButton.Direction.LEFT),
    operatorButton9 = new DPadButton(operatorJoystick, DPadButton.Direction.UP),
    operatorButton10 = new DPadButton(operatorJoystick, DPadButton.Direction.RIGHT),
    operatorButton11 = new DPadButton(operatorJoystick, DPadButton.Direction.DOWN),
    driverButton1 = new JoystickButton(driverJoystick, RobotMap.BUTTON_A),
    driverButton2 = new JoystickButton(driverJoystick, RobotMap.BUTTON_B),
    driverButton3 = new JoystickButton(driverJoystick, RobotMap.BUTTON_X),
    driverButton4 = new JoystickButton(driverJoystick, RobotMap.BUTTON_Y),
    driverButton5 = new DPadButton(driverJoystick, DPadButton.Direction.LEFT),
    driverButton6 = new DPadButton(driverJoystick, DPadButton.Direction.UP),
    driverButton7 = new DPadButton(driverJoystick, DPadButton.Direction.RIGHT),
    driverButton8 = new DPadButton(driverJoystick, DPadButton.Direction.DOWN);

    public OI() {
        // Driver controls
        driverButton1.whileHeld(new GrabCargo());
        driverButton2.whileHeld(new ShootCargo());
        driverButton3.whenPressed(new Eject());
        driverButton4.whenPressed(new RetractEjector());

        // // Operator Controls
        operatorButton1.whileHeld(new RaiseArm());
        operatorButton2.whileHeld(new LowerArm());
        operatorButton3.whenPressed(new AimArm(RobotMap.Cargo1, true));
        operatorButton4.whenPressed(new AimArm(RobotMap.Cargo2, true));
        operatorButton5.whenPressed(new AimArm(RobotMap.Cargo3, true));
        operatorButton8.whenPressed(new AimArm(RobotMap.HatchPanel1, false));
        operatorButton9.whenPressed(new AimArm(RobotMap.HatchPanel2, false));
        operatorButton10.whenPressed(new AimArm(RobotMap.HatchPanel3, false));

        // // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("GrabCargo", new GrabCargo());
        SmartDashboard.putData("ShootCargo", new ShootCargo());
        SmartDashboard.putData("EjectHatch", new Eject());
        SmartDashboard.putData("RetractEjector", new RetractEjector());
        SmartDashboard.putData("RaiseArm", new RaiseArm());
        SmartDashboard.putData("Lower Arm", new LowerArm());
        SmartDashboard.putData("ExtendLegs", new ExtendAllLegs());
        SmartDashboard.putData("RetractFrontLegs", new RetractFrontLegs());
        SmartDashboard.putData("RetractRearLegs", new RetractRearLegs());
        SmartDashboard.putData("ARM/Zero", new AimArm(0.0, true));
        SmartDashboard.putData("ARM/Cargo_Level 1", new AimArm(RobotMap.Cargo1, true));
        SmartDashboard.putData("ARM/Cargo_Level 2", new AimArm(RobotMap.Cargo2, true));
        SmartDashboard.putData("ARM/Cargo_Level_3", new AimArm(RobotMap.Cargo3, true));
        SmartDashboard.putData("ARM/Hatch_Level_1", new AimArm(RobotMap.HatchPanel1, false));
        SmartDashboard.putData("ARM/Hatch_Level_2", new AimArm(RobotMap.HatchPanel2, false));
        SmartDashboard.putData("ARM/Hatch_Level_3", new AimArm(RobotMap.HatchPanel3, false));
    }

    public Joystick getdriverJoystick() {
        return driverJoystick;    
    }

    public Joystick getOperatorJoystick() {
        return operatorJoystick;
    }
}
