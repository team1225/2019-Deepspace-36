// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1225.DeepSpace36;

import org.usfirst.frc1225.DeepSpace36.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc1225.DeepSpace36.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    public JoystickButton driverButton1;
    public JoystickButton driverButton2;
    public JoystickButton driverButton3;
    public JoystickButton driverButton4;
    public JoystickButton driverButton5;
    public JoystickButton driverButton6;
    public JoystickButton driverButton7;
    public JoystickButton driverButton8;
    public JoystickButton driverButton9;

    public JoystickButton operatorButton1;
    public JoystickButton operatorButton2;
    public JoystickButton operatorButton3;
    public JoystickButton operatorButton4;
    public JoystickButton operatorButton5;
    public JoystickButton operatorButton6;
    public JoystickButton operatorButton7;
    public JoystickButton operatorButton8;
    public JoystickButton operatorButton9;
    public Joystick driverJoystick;
    public Joystick operatorJoystick;

    public OI() {
        driverJoystick = new Joystick(0);
        operatorJoystick = new Joystick(1);
        
        // Driver controls
        
        // joystickButton3 = new JoystickButton(driverJoystick, RobotMap.LEFT_BUMPER);
        // joystickButton3.whileHeld(new GrabCargo());
        // joystickButton4 = new JoystickButton(driverJoystick, RobotMap.RIGHT_BUMPER);
        // joystickButton4.whileHeld(new ShootCargo());

        // joystickButton5 = new JoystickButton(driverJoystick, RobotMap.BUTTON_X);
        // joystickButton5.whenPressed(new ExtendAllLegs());
        // joystickButton5 = new JoystickButton(driverJoystick, RobotMap.BUTTON_Y);
        // joystickButton5.whileHeld(new RetractRearLegs());
        // joystickButton5.whileHeld(new RetractFrontLegs());

        // // Operator Controls
        operatorButton1 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_A);
        operatorButton1.whileHeld(new RaiseArm());
        operatorButton2 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_B);
        operatorButton2.whileHeld(new LowerArm());
        operatorButton3 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_X);
        operatorButton3.whenPressed(new AimArm(RobotMap.Cargo1, true));
        operatorButton4 = new JoystickButton(operatorJoystick, RobotMap.BUTTON_Y);
        operatorButton4.whenPressed(new AimArm(RobotMap.Cargo2, true));
        operatorButton5 = new JoystickButton(operatorJoystick, RobotMap.RIGHT_STICK_BUTTON);
        operatorButton5.whenPressed(new AimArm(RobotMap.Cargo3, true));
        operatorButton6 = new JoystickButton(operatorJoystick, RobotMap.RIGHT_STICK_BUTTON);
        operatorButton6.whenPressed(new AimArm(RobotMap.Cargo3, true));
        operatorButton7 = new JoystickButton(operatorJoystick, RobotMap.RIGHT_STICK_BUTTON);
        operatorButton7.whenPressed(new AimArm(RobotMap.Cargo3, true));
        driverButton1 = new JoystickButton(driverJoystick, RobotMap.BUTTON_A);
        driverButton1.whenPressed(new ExtendAllLegs());
        driverButton1 = new JoystickButton(driverJoystick, RobotMap.BUTTON_B);
        driverButton1.whenPressed(new RetractRearLegs());
        driverButton1 = new JoystickButton(driverJoystick, RobotMap.BUTTON_X);
        driverButton1.whenPressed(new RetractFrontLegs());

        // // SmartDashboard Buttons
        // SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        // SmartDashboard.putData("GrabCargo", new GrabCargo());
        // SmartDashboard.putData("RaiseArm", new RaiseArm());
        // SmartDashboard.putData("ExtendFrontLegs", new ExtendFrontLegs());
        // SmartDashboard.putData("RetractFrontLegs", new RetractFrontLegs());
    }

    public Joystick getdriverJoystick() {
        return driverJoystick;
    }
}
